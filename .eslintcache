[{"C:\\Users\\Prashant\\Desktop\\shopApp\\src\\index.js":"1","C:\\Users\\Prashant\\Desktop\\shopApp\\src\\App.js":"2","C:\\Users\\Prashant\\Desktop\\shopApp\\src\\reportWebVitals.js":"3","C:\\Users\\Prashant\\Desktop\\shopApp\\src\\components\\displayMovies\\displayMovies.js":"4","C:\\Users\\Prashant\\Desktop\\shopApp\\src\\components\\searchBar\\searchBar.js":"5"},{"size":585,"mtime":1608580436785,"results":"6","hashOfConfig":"7"},{"size":528,"mtime":1608178268560,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1608178268560,"results":"9","hashOfConfig":"7"},{"size":11441,"mtime":1608695548033,"results":"10","hashOfConfig":"7"},{"size":3016,"mtime":1608755222648,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"12em0du",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Prashant\\Desktop\\shopApp\\src\\index.js",[],["24","25"],"C:\\Users\\Prashant\\Desktop\\shopApp\\src\\App.js",[],"C:\\Users\\Prashant\\Desktop\\shopApp\\src\\reportWebVitals.js",[],"C:\\Users\\Prashant\\Desktop\\shopApp\\src\\components\\displayMovies\\displayMovies.js",["26","27","28","29","30"],"import React, { Component } from 'react'\r\nimport './displayMovies.css'\r\nimport loading from '../../assets/loading.gif'\r\n\r\nlet nomIDs = [];\r\nlet nomMovies = [];\r\n\r\nclass DisplayMovies extends Component {\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.state = {\r\n            nomOne: null,\r\n            nomTwo: null,\r\n            nomThree: null,\r\n            nomFour: null,\r\n            nomFive: null,\r\n            showPoster: false,\r\n        }\r\n        this.handleNomChange = this.handleNomChange.bind(this);\r\n        this.handleNomRemove = this.handleNomRemove.bind(this);\r\n        this.handleToggle = this.handleToggle.bind(this);\r\n        this.handleClearNoms = this.handleClearNoms.bind(this);\r\n    }\r\n\r\n    handleNomChange(event) {\r\n        // Checks for an empty nomination and assigns value of clicked button if found\r\n        if (!this.state.nomOne && nomIDs.includes(event.target.id) == false) {\r\n            this.setState({ nomOne: { info: event.target.value, movieID: event.target.id, place: \"1. \" } });\r\n            nomIDs.push(event.target.id);\r\n            nomMovies.push(event.target.value);\r\n        }\r\n        else if (!this.state.nomTwo && nomIDs.includes(event.target.id) == false) {\r\n            this.setState({ nomTwo: { info: event.target.value, movieID: event.target.id, place: \"2. \" } });\r\n            nomIDs.push(event.target.id);\r\n            nomMovies.push(event.target.value);\r\n        }\r\n        else if (!this.state.nomThree && nomIDs.includes(event.target.id) == false) {\r\n            this.setState({ nomThree: { info: event.target.value, movieID: event.target.id, place: \"3. \" } });\r\n            nomIDs.push(event.target.id);\r\n            nomMovies.push(event.target.value);\r\n        }\r\n        else if (!this.state.nomFour && nomIDs.includes(event.target.id) == false) {\r\n            this.setState({ nomFour: { info: event.target.value, movieID: event.target.id, place: \"4. \" } });\r\n            nomIDs.push(event.target.id);\r\n            nomMovies.push(event.target.value);\r\n        }\r\n        else if (!this.state.nomFive && nomIDs.includes(event.target.id) == false) {\r\n            this.setState({ nomFive: { info: event.target.value, movieID: event.target.id, place: \"5. \" } });\r\n            nomIDs.push(event.target.id);\r\n            nomMovies.push(event.target.value);\r\n        }\r\n    }\r\n\r\n    handleNomRemove(event) {\r\n        // Removes nomination from nomination list\r\n        if (this.state.nomOne && event.target.value === this.state.nomOne.info) {\r\n            this.setState({ nomOne: null });\r\n            nomIDs.splice(nomIDs.indexOf(this.state.nomOne.movieID), 1);\r\n            nomMovies.splice(nomMovies.indexOf(event.target.value), 1);\r\n        }\r\n        else if (this.state.nomTwo && event.target.value === this.state.nomTwo.info) {\r\n            this.setState({ nomTwo: null });\r\n            nomIDs.splice(nomIDs.indexOf(this.state.nomTwo.movieID), 1);\r\n            nomMovies.splice(nomMovies.indexOf(event.target.value), 1);\r\n        }\r\n        else if (this.state.nomThree && event.target.value === this.state.nomThree.info) {\r\n            this.setState({ nomThree: null });\r\n            nomIDs.splice(nomIDs.indexOf(this.state.nomThree.movieID), 1);\r\n            nomMovies.splice(nomMovies.indexOf(event.target.value), 1);\r\n        }\r\n        else if (this.state.nomFour && event.target.value === this.state.nomFour.info) {\r\n            this.setState({ nomFour: null });\r\n            nomIDs.splice(nomIDs.indexOf(this.state.nomFour.movieID), 1);\r\n            nomMovies.splice(nomMovies.indexOf(event.target.value), 1);\r\n        }\r\n        else if (this.state.nomFive && event.target.value === this.state.nomFive.info) {\r\n            this.setState({ nomFive: null });\r\n            nomIDs.splice(nomIDs.indexOf(this.state.nomFive.movieID), 1);\r\n            nomMovies.splice(nomMovies.indexOf(event.target.value), 1);\r\n        }\r\n    }\r\n\r\n    handleToggle() {\r\n        // Used to update state as Show poster toggle is toggled\r\n        this.setState({ showPoster: !this.state.showPoster });\r\n    }\r\n\r\n    handleClearNoms() {\r\n        // Clears all nominations by resetting state and local variables\r\n        this.setState({ nomOne: null, nomTwo: null, nomThree: null, nomFour: null, nomFive: null });\r\n        nomMovies = [];\r\n        nomIDs = [];\r\n    }\r\n\r\n    checkIfIDExists(movie) {\r\n        // Checks if movieID exists in current list of nominations\r\n        if (nomIDs.includes(movie.imdbID)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"d-flex flex-column\">\r\n                <div class=\"card mb-2 pt-1\">\r\n                    {/* Extra Features */}\r\n                    <div class=\"d-flex justify-content-around\">\r\n                        <div class=\"m-2 p-1\">\r\n                            <h5>Options:</h5>\r\n                        </div>\r\n                        <div class=\"custom-control custom-switch m-2 p-2\">\r\n                            <input type=\"checkbox\" class=\"custom-control-input\" id=\"switchPoster\" onChange={this.handleToggle} />\r\n                            <label class=\"custom-control-label switch-align\" for=\"switchPoster\">Show posters</label>\r\n                        </div>\r\n                        <div class=\"m-2 p-1\">\r\n                            <button type=\"button\" class=\"btn btn-outline-secondary\" onClick={this.handleClearNoms}>Clear all nominations</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* Results List */}\r\n                <div class=\"d-flex flex-row\">\r\n                    <div class=\"card pt-2 pl-2 pr-2 card-set-width\">\r\n                        <div class=\"card-body\">\r\n                            <div class=\"d-flex flex-row\">\r\n                                <div>\r\n                                    <h5 class=\"card-title\">{this.props.searchTerm ? 'Results for \"' + this.props.searchTerm + '\"' : \"Results\"}</h5>\r\n                                </div>\r\n                            </div>\r\n                            <ul class=\"list-group\">\r\n                                {this.props.movies ? this.props.movies.map(\r\n                                    (movie) =>\r\n                                        this.checkIfIDExists(movie) ?\r\n                                            // Disables nominate button if ID exists\r\n                                            <li class=\"list-group-item list-group-item-light\">\r\n                                                <form class=\"d-flex flex-column m-1\">\r\n                                                    <h6>{movie.Title} ({movie.Year})</h6>\r\n                                                    {this.state.showPoster ? <img alt=\"\" src={movie.Poster} /> : null}\r\n                                                    <button type=\"button\" class=\"btn btn-secondary btn-set-width mt-2\" disabled={true}>Nominate</button>\r\n                                                </form>\r\n                                            </li>\r\n                                            :\r\n                                            // Enables button as movie does not exists in nominations\r\n                                            <li class=\"list-group-item list-group-item-light\">\r\n                                                <form class=\"d-flex flex-column m-1\">\r\n                                                    <h6>{movie.Title} ({movie.Year})</h6>\r\n                                                    {this.state.showPoster ? <img alt=\"\" src={movie.Poster} /> : null}\r\n                                                    <button type=\"button\" class=\"btn btn-secondary btn-set-width mt-2\" id={movie.imdbID} value={movie.Title + \" (\" + movie.Year + \")\"} onClick={this.handleNomChange}>Nominate</button>\r\n                                                </form>\r\n                                            </li>\r\n                                ) :\r\n                                    <li class=\"list-group-item list-group-item-light\">\r\n                                        {/* Shows loading gif if query has been completed else \"No Results\" */}\r\n                                        {this.props.isLoading ?\r\n                                            <div class=\"text-center\">\r\n                                                <img class=\"loadingGIF\" src={loading} alt=\"loading...\" />\r\n                                            </div>\r\n                                            : \"No results\"}\r\n                                    </li>\r\n                                }\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    {/* Nomination List */}\r\n                    <div class=\"pl-2\">\r\n                        <div class=\"d-flex flex-row\">\r\n                            <div class=\"card pt-2 pl-2 pr-2 card-set-width\">\r\n                                <div class=\"card-body\">\r\n                                    <h5 class=\"card-title\">Nominations (Top 5)</h5>\r\n                                    {/* Shows banner if nominations reaches limit of 5 */}\r\n                                    {this.state.nomOne && this.state.nomTwo && this.state.nomThree && this.state.nomFour && this.state.nomFive ? <div class=\"alert alert-info\" role=\"alert\">\r\n                                        Nominations limit reached (Max 5)\r\n                            </div> : null}\r\n                                    <ul class=\"list-group\">\r\n                                        {/* Checks if nominations list is empty or not */}\r\n                                        {[this.state.nomOne, this.state.nomTwo, this.state.nomThree, this.state.nomFour, this.state.nomFive] ? [this.state.nomOne, this.state.nomTwo, this.state.nomThree, this.state.nomFour, this.state.nomFive].map(\r\n                                            (nom) =>\r\n                                                nom ?\r\n                                                    // If nomination is not empty, shows nomination with a button to remove nomination\r\n                                                    <li class=\"list-group-item list-group-item-light\">\r\n                                                        <form class=\"d-flex flex-column m-1\">\r\n                                                            <p><b>{nom.place}</b> {nom.info}</p>\r\n                                                            <button type=\"button\" class=\"btn btn-secondary btn-set-width\" value={nom.info} onClick={this.handleNomRemove}>Remove</button>\r\n                                                        </form>\r\n                                                    </li>\r\n                                                    :\r\n                                                    // If nomination is empty, shows \"Choose a movie\"\r\n                                                    <li class=\"list-group-item list-group-item-light\">\r\n                                                        Choose a movie\r\n                                                    </li>\r\n                                        ) : null}\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default DisplayMovies;\r\n","C:\\Users\\Prashant\\Desktop\\shopApp\\src\\components\\searchBar\\searchBar.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":28,"column":68,"nodeType":"37","messageId":"38","endLine":28,"endColumn":70},{"ruleId":"35","severity":1,"message":"36","line":33,"column":73,"nodeType":"37","messageId":"38","endLine":33,"endColumn":75},{"ruleId":"35","severity":1,"message":"36","line":38,"column":75,"nodeType":"37","messageId":"38","endLine":38,"endColumn":77},{"ruleId":"35","severity":1,"message":"36","line":43,"column":74,"nodeType":"37","messageId":"38","endLine":43,"endColumn":76},{"ruleId":"35","severity":1,"message":"36","line":48,"column":74,"nodeType":"37","messageId":"38","endLine":48,"endColumn":76},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]